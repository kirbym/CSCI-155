// Chapter 6.cpp : Defines the entry point for the console application.
// Chapter 6 Programs and Topics

#include "stdafx.h"
#include <iostream>
#include <cmath>
#include <iomanip>
using namespace std;

/*	//introduction to functions
void secondDisplayMessage()		//have to put function above other function that is calling it
{								//or declare the function with a function prototype
	cout << "This is the second display message.\n";
}

void displayMessage()	//void funtion does not return anything
{
	cout << "Hello World.\n";
	secondDisplayMessage();		//calling a function within a function
}

int main()
{
	cout << "This is before calling displayMessage funtion.\n";
	
	for (int i = 0; i < 10; i++)
	{
		if (i != 3)
		{
			displayMessage();
		}
	}

	system("pause");
    return 0;
}
*/

/*
void func1()
{
	cout << "Able was I\n";
}

void func2()
{
	cout << "I saw Elba\n";
}

int main()
{
	int input;
	cout << "Enter a number: ";
	cin >> input;
	if (input < 10)
	{
		func1();
		func2();
	}
	else
	{
		func2();
		func1();
	}
	system("pause");
	return 0;
}
*/

/*
//sending multiple arguments to a function
void displayValue(float, float, float);		//function prototype

int main()
{
	float num1, num2, num3;

	cout << "This program will multiply three numbers." << endl;
	cout << "Enter three numbers separated by a space.\n";
	cin >> num1 >> num2 >> num3;
	displayValue(num1, num2, num3);
	cout << "\nBack in main function" << endl;
	system("pause");
	return 0;
}

void displayValue(float num1, float num2, float num3)
{
	float answer = num1 * num2 * num3;
	cout << answer;
}
*/

/*
bool isPrime(int);		//funtion prototype

int main()
{
	int value;		// value to be determined if prime or not
	cout << "Enter a value greater than or equal to 2\n"
		<< "and this program will determine if the number is prime." << endl;
	cin >> value;
	while (value < 2)	// only allowing values greater than or equal to 2
	{
		cout << "Choose a value greater than or equal to 2.\n";
		cin >> value;
	}

	if (isPrime(value) != 0)	// interpreting results from isPrime() function
	{
		cout << "The number is prime.\n";
	}
	else
		cout << "The number is not prime.\n";

	cout << "Here is a list of all prime numbers up to 100." << endl;
	for (int j = 2; j <= 100; j++)
	{
		if (isPrime(j) != 0)
		{
			cout << setw(4) << j << "\t";
		}
	}
	cout << endl;
	system("pause");
	return 0;
}

bool isPrime(int value)		// function to determine if value is prime
{
	if (value <= 3)		// value is prime if 2 or 3
		return true;
	else if (value % 2 == 0 || value % 3 == 0)		// testing if value is a multiple of 2 or 3
		return false;								// if yes, value is not prime

	// primality test (test wheter "value" is divisible by any numbers over the interval [2,sqrt(value)]
	int i = 5;	//already tested 2,3, and intuitively 4

	while (i*i <= value)	//same as i <= sqrt(value)
	{
		if (value % i == 0)
		{
			return false;
		}
		i += 2;
	}
	return true;
}
*/

/*
// Using a function to divide two numbers
double divide(double, double);	// function prototype

int main()
{
	double arg1,	// first argument
		arg2,		// second argument
		result;		// result of division function

	// Ask user to enter two numbers
	cout << "Enter two numbers and this program will divide the first by the second.\n";
	cout << "Enter the two numbers separated by a space.\n";
	cin >> arg1 >> arg2;
	
	// If user enters 0 as arg2, display error message
	if (arg2 != 0.0)
	{
		result = divide(arg1, arg2);	// result of division function
		cout << "\nThe result is " << result << endl;
	}
	else
		cout << "\nIt is not possible to divide by 0.\n";
	
	system("pause");
	return 0;
}

double divide(double arg1, double arg2)
{	
	double quotient = arg1 / arg2;	// divide arg1 by arg2

	return quotient;	// return the quotient
}
*/

/*
// #10 Present Value (from profs book)
// Given the future value, interest rate, and numbers of years, calculate the amount of money
// needed to deposit "today" to reach that value in the alotted time. Use a separate function to complete this.
// Present value can be calulated by 
//		P = F / (1 + r)^n
// where P = present value, F = future value, r = interest rate, n = years

double presentValue(double, double, double);	//function prototype

int main()
{
	double futureValue,		//value user wants to reach
		intRate,			//interest rate on the savings account
		years;				//how long the account is accruing interest

	char answer;			//allow user to retry program or quit altogether

	cout << "This program can predict how much money you need to deposit today\n";
	cout << "to achieve a particular future value.";
	cout << "\nEnter 'Y' to begin, enter 'N' to quit. ";	//asks user to begin or quit
	cin >> answer;

	while (answer == 'Y' || answer == 'y')		//if user selects 'Y', the rest of the program runs
	{
		//ask for future value from user
		cout << "\nEnter the value you wish to achieve: $";
		cin >> futureValue;
		while (futureValue < 0)		//input validation
		{
			cout << "\nPlease enter a value greater than or equal to $0.";
			cout << "\nEnter the value you wish to achieve: $";
			cin >> futureValue;
		}
		//ask for interest rate from user
		cout << "\nEnter the interest rate on the account (as a decimal): ";
		cin >> intRate;
		while (intRate < 0)			//input validation
		{
			cout << "\nPlease enter a value greater than or equal to 0.";
			cout << "\nEnter the interest rate on the account (as a decimal): ";
			cin >> intRate;
		}
		//ask for how many years from user
		cout << "\nEnter how many years the account will be active: ";
		cin >> years;
		while (years < 0)			//input validation
		{
			cout << "\nPlease enter a value greater than or equal to 0.";
			cout << "\nEnter how many years the account will be active: ";
			cin >> years;
		}
		//display result of function
		cout << "\nYou need to deposit $" << presentValue(futureValue, intRate, years) << endl;

		cout << "\nEnter 'Y' to retry, enter 'N' to quit. ";		//ask user if they want to retry or quit
		cin >> answer;
	}
	return 0;
}

double presentValue(double futureValue, double intRate, double years)
{
	double presentValue;		//value that would need to be deposited to reach the future value

	presentValue = futureValue / pow(1 + intRate, years);	//formula to calculate present value

	return presentValue;
}
*/

/*
// #11 Stock Profit (from profs book)
// Calculate the profit of loss from a stock transaction. Use a function to achieve this.
// Net gain can be calculated by
//		Profit = ((NS * SP) - SC) - ((NS * PP) + PC)
// where NS = number of shares, SP = sale price/share, SC = sale commision paid,
// PP = purchase price/share, PC = purchase commission paid
// if Profit > 0 ==> sale resulted in a profit, if Profit < 0 ==> sale resulted in a loss

double stockNetGain(int, double, double, double, double);

int main()
{
	int nS;		//# of shares
	double sP,	//sale price/share
		sC,		//sale commission paid
		pP,		//purchase price/share
		pC,		//purchase commission paid
		result;

	char answer;	//let user decide to continue or not

	cout << "This program can calculate the net gain or loss of a stock transaction." << endl;
	cout << "Enter 'Y' to begin, or 'N' to quit the program. ";
	cin >> answer;
	if (answer == 'N' || answer == 'n')		//allow user to quit program
		return 0;

	do
	{
		//ask for number of shares from user
		cout << "\nEnter the number of shares: ";
		cin >> nS;
		while (nS < 0)		//input validation
		{
			cout << "\nValue must be >= 0";
			cout << "\nEnter the number of shares: ";
			cin >> nS;
		}
		//ask for sale price/share from user
		cout << "\nEnter the sale price/share: $";
		cin >> sP;
		while (sP < 0)		//input validation
		{
			cout << "\nValue must be >= 0";
			cout << "\nEnter the sale price/share: $";
			cin >> sP;
		}
		//ask for sale commission paid from user
		cout << "\nEnter the sales commission paid: $";
		cin >> sC;
		while (sC < 0)		//input validation
		{
			cout << "\nValue must be >= 0";
			cout << "\nEnter the sales commission paid: $";
			cin >> sC;
		}
		//ask for purchase price/share from user
		cout << "\nEnter the purchase price/share: $";
		cin >> pP;
		while (pP < 0)		//input validation
		{
			cout << "\nValue must be >= 0";
			cout << "\nEnter the purchase price/share: $";
			cin >> pP;
		}
		//ask for purchase commission paid from user
		cout << "\nEnter the purchase commission paid: $";
		cin >> pC;
		while (pC < 0)		//input validation
		{
			cout << "\nValue must be >= 0";
			cout << "\nEnter the purchase commission paid: $";
			cin >> pC;
		}
		
		//display results
		result = stockNetGain(nS, sP, sC, pP, pC);
		cout << showpoint << fixed << setprecision(2);
		cout << "\nThe net worth of the stock transaction is $" << result << endl;
		
		//ask user if they want to calculate another transaction
		cout << "Calculate another stock transaction (Y/N) ? ";
		cin >> answer;
		
	} while (answer == 'Y' || answer == 'y');
	return 0;
}

double stockNetGain(int nS, double sP, double sC, double pP, double pC)
{
	double netGain;		//net gain or loss of stock transaction

	netGain = ((nS * sP) - sC) - ((nS * pP) + pC);		//formula to calculate net gain

	return netGain;
}
*/

/*
int main()
{
	int x = 10;
	int &myRef = x;

	cout << "Myreference: " << myRef;
	x++;
	cout << "\nThe x value is : " << x << endl;
	cout << "\nThe myRef value is: " << myRef << endl;
	system("pause");
	return 0;
}
*/

/*
//function prototypes
void getLotteryInfo(int &, int &);
long int computeWays(int, int);
long int factorial(int);

int main()
{
	int pickFrom,		//# of numbers to pick from
		numPicks;		//# of numbers to select
	long int ways;		//# of different possible ways to pick the numbers

	cout << "This program will tell you your probability of "
		<< "winning \"Little Lotto\". \n";
	getLotteryInfo(pickFrom, numPicks);
	ways = computeWays(pickFrom, numPicks);

	cout << fixed << showpoint << setprecision(4);
	cout << "\nYour chance of winning the lottery is "
		<< "1 chance in " << ways << ".\n";
	cout << "This is a probability of " << (1.0 / ways) << endl;
	system("pause");
	return 0;
}

void getLotteryInfo(int &pickFrom, int &numPicks)
{
	cout << "\nHow many numbers (1-12) are there to pick from? ";
	cin >> pickFrom;
	while (pickFrom < 1 || pickFrom > 12)
	{
		cout << "There must be between 1 and 12 numbers.\n"
			<< "How many numbers (1-12) are there to pick from? ";
		cin >> pickFrom;
	}

	cout << "How many numbers must you pick to play? ";
	cin >> numPicks;
	while (numPicks < 1 || numPicks > pickFrom)
	{
		if (numPicks < 1)
			cout << "You must pick at least one number.\n";
		else
			cout << "You must pick " << pickFrom << " or fewer numbers.\n";

		cout << "How many numbers must you pick to play? ";
		cin >> numPicks;
	}
}

long int computeWays(int n, int k)
{
	return factorial(n) / (factorial(k) * factorial(n - k));
}

long int factorial(int number)
{
	long int factTotal = 1;

	for (int count = number; count >= 1; count--)
	{
		factTotal *= count;
	}

	return factTotal;
}
*/
