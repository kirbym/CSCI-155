// Chapter 5.cpp : Defines the entry point for the console application.
// Chapter 5 Programs and Topics

#include "stdafx.h"
#include <iostream>
#include <iomanip>
#include <string>
#include <cmath>
#include <ctime>
#include <fstream> //for files
using namespace std;

/*
//Display odd numbers from [1,15] using a while loop
int main()
{
int oddNum = 1;
while (oddNum <= 15)
{
cout << oddNum << endl;
oddNum += 2;
}
system("pause");
return 0;
}
*/

/*
int main()
{
const int MIN_A_SCORE = 90,
MIN_B_SCORE = 80,
MIN_C_SCORE = 70,
MIN_D_SCORE = 60,
MIN_F_SCORE = 0;

int numStudents,
student,
testScore;
double sum = 0, average;
char grade;
bool goodScore = true;

cout << "How many students do you have grades for? ";
cin >> numStudents;

student = 1;

while (student <= numStudents)
{
//Get students numeric test score
cout << "\nEnter the numeric test score for student #" << student << ": ";
cin >> testScore;

sum += testScore;

//Determine the letter grade
if (testScore >= MIN_A_SCORE)
grade = 'A';
else if (testScore >= MIN_B_SCORE)
grade = 'B';
else if (testScore >= MIN_C_SCORE)
grade = 'C';
else if (testScore >= MIN_D_SCORE)
grade = 'D';
else if (testScore >= MIN_F_SCORE)
grade = 'F';
else
goodScore = false; //Score was below 0

//Display letter grade
if (goodScore)
cout << "The letter grade is " << grade << ".\n";
else
cout << "The score cannot be below zero.\n";

student += 1;
}

average = sum / numStudents;
cout << "The average test score is " << average << endl;
system("pause");
return 0;
}
*/

/*
//Use while loops to validate data entered by user
int main()
{
//Constanst for min and max players per team
const int MIN_PLAYERS = 9,
MAX_PLAYERS = 15;

//Variables
int players,	//number of available players
teamSize,	//number of desired players per team
numTeams,	//number of teams
leftOver;	//number of players left over

//Get the number of players per team
cout << "How many players do you wish per team?\n";
cout << "(Enter a value in the range of " << MIN_PLAYERS << " - " << MAX_PLAYERS << ")";
cin >> teamSize;

//validate team size making sure it is between 9 and 15
while (teamSize < MIN_PLAYERS || teamSize > MAX_PLAYERS)
{
cout << "\nTeam size should be " << MIN_PLAYERS << " to " << MAX_PLAYERS << " players.\n";
cout << "How many players do you wish per team? ";
cin >> teamSize;
}

//Get the number of players available
cout << "\nHow many players are available? ";
cin >> players;

//validate the number of players available
while (players <= 0)
{
cout << "Please enter a positive number: ";
cin >> players;
}

//calculate number of teams and left over players
numTeams = players / teamSize;
leftOver = players % teamSize;

cout << "\nThere will be " << numTeams << " teams with " << leftOver << " player(s) left over.\n";

system("pause");
return 0;
}
*/

/*
//Prefix (++num) and Postfix (num--) increment/ decrement operators
//Prefix increments variable by 1, then performs the operation
//Postfix performs the operation, then increments variable by 1
int main()
{
int a, b, c, d, e;
a = 2;
b = 5;
e = 5;
c = a * ++b;
d = a * e++;

cout << a << "\t" << b << "\t" << c << "\t" << d << "\t" << e << endl;

system("pause");
return 0;
}
*/

/*
// This menu-driven Health Club membership program carries out the
// appropriate actions based on the menu choice entered. A do-while loop
// allows the program to repeat until the user selects menu choice 4.
int main()

{
// Constants for membership rates
const double ADULT_RATE = 120.0;
const double CHILD_RATE = 60.0;
const double SENIOR_RATE = 100.0;

int choice;           // Menu choice
int months;           // Number of months
double charges;       // Monthly charges

do
{   // Display the menu and get the user's choice
cout << "\n   Health Club Membership Menu\n\n";
cout << "1. Standard Adult Membership\n";
cout << "2. Child Membership\n";
cout << "3. Senior Citizen Membership\n";
cout << "4. Quit the Program\n\n";
cout << "Enter your choice: ";
cin >> choice;

// Validate the menu selection
while ((choice < 1) || (choice > 4))
{
cout << "Please enter 1, 2, 3, or 4: ";
cin >> choice;
}
// Process the user's choice
if (choice != 4)
{
cout << "For how many months? ";
cin >> months;

while (months <= 0)
{
cout << "Please enter a positve number.\n";
cout << "How many months? ";
cin >> months;
}

// Compute charges based on user input
switch (choice)
{
case 1: charges = months * ADULT_RATE;
break;
case 2: charges = months * CHILD_RATE;
break;
case 3: charges = months * SENIOR_RATE;
}
// Display the monthly charges
cout << fixed << showpoint << setprecision(2);
cout << "The total charges are $" << charges << endl;
}
} while (choice != 4); // Loop again if the user did not
// select choice 4 to quit
return 0;

}
*/

/*
//This program calculates the sum of quotients using a for loop (1/30 + 2/29 +... +29/2 + 30/1)
int main()
{
double total = 0;
for (double num1 = 1, num2 = 30; num1 <= 30; num1++, num2--)
{
double quotient = num1 / num2;
total += quotient;
}

cout << fixed << showpoint << setprecision(2) << total << endl;
system("pause");
return 0;
}
*/

/*
// This program puts a name in the middle of the line (maybe could be done a better way)
int main()
{

	string name;
	cout << "Enter your name: ";
	getline(cin, name);

	int numChars = name.length();
	string space;
	space.assign(40 - numChars, ' ');

	cout << endl << space << name << endl;

	system("pause");
	return 0;
}
*/

/*
//Central Mountain Credit Union Case Study
int main()
{
	double loan,	//loan amount
		rate,	//annual interest rate
		moInterestRate,		//monthly interest rate
		years,		//years of loan
		balance,	//monthly balance
		term,	//used to calculate payments
		payment;	//monthly payment
	int numPayments;	//number of payments

	//get loan information
	cout << "Enter the loan amount: ";
	cin >> loan;
	cout << "Enter the annual interest rate (as a decimal): ";
	cin >> rate;
	cout << "Enter how many years for the loan: ";
	cin >> years;

	//calculate monthly payment
	numPayments = static_cast<int>(12 * years);
	moInterestRate = rate / 12.0;
	term = pow((1 + moInterestRate), numPayments);
	payment = (loan * moInterestRate * term) / (term - 1.0);

	//Dispaly monthly payment
	cout << fixed << showpoint << setprecision(2);
	cout << "Monthly Payment: $" << payment << endl;

	//Display report header
	cout << endl;
	cout << setw(5) << "Month" << setw(10) << "Interest";
	cout << setw(10) << "Principal" << setw(9) << "Balance" << endl;
	cout << "----------------------------------\n";

	balance = loan;		//Remaining balance starts as full loan amount

	for (int month = 1; month <= numPayments; month++)
	{
		double moInterest,	//amount of payment that pays interest
			principal;		//amount of payment that lowers the balance

		//calculate amount paid for this month's interest and payment
		moInterest = moInterestRate * balance;	//calculate interest payment
		if (month != numPayments)	//rest of payment goes to payment
			principal = payment - moInterest;
		else	//For the last month
		{
			principal = balance;	//pay exact final balance
			payment = balance + moInterest;
		}
		//Calculate new loan balance
		balance -= principal;	//only principal reduces the balance, not whole payment

		//Display this month's payment figures
		cout << setw(4) << month << setw(10) << moInterest;
		cout << setw(10) << principal << setw(10) << balance << endl;
	}
	system("pause");
	return 0;
}
*/

/*
// 8. Math Tutor
int main()
{
	unsigned seed;	//}
	seed = time(0); // } random number generation
	srand(seed);	//}

	const int MAX = 10, MIN = 1; //Range of random number
	int num1 = (rand() % (MAX - MIN + 1)) + MIN,	//} random number between [1,10]
		num2 = (rand() % (MAX - MIN + 1)) + MIN;	//}
	double userAnswer,	//user's answer
		correctAnswer;	//correct answer to problem
	int choice;	//choice to select what problem

	do	//Display menu until user chooses to exit
	{
		cout << "Select the math problem: \n";
		cout << "1. Addition\n";
		cout << "2. Subtraction\n";
		cout << "3. Multiplication\n";
		cout << "4. Division\n";
		cout << "5. Exit\n";
		cout << "Enter 1, 2, 3, 4, or 5: ";
		cin >> choice;

		while (choice < 1 || choice > 5)	//input validation
		{
			cout << "Please enter a valid choice: ";
			cin >> choice;
		}

		if (choice != 5)	//Display math problem based on choice by user
		{
			switch (choice)
			{
			case 1: cout << "\n\nAddition\n";	//addition problem
				cout << "  " << num1 << endl;
				cout << "+ " << num2 << endl;
				cout << "----" << endl << " ";
				cin >> userAnswer;
				correctAnswer = num1 + num2;
				cout << "Correct Answer: " << correctAnswer << endl << endl;
				break;
			case 2: cout << "\n\nSubtraction\n";	//subtraction problem
				cout << "  " << num1 << endl;
				cout << "- " << num2 << endl;
				cout << "----" << endl << " ";
				cin >> userAnswer;
				correctAnswer = num1 - num2;
				cout << "Correct Answer: " << correctAnswer << endl << endl;
				break;
			case 3: cout << "\n\nMultiplication\n";		//multiplication problem
				cout << "  " << num1 << endl;
				cout << "x " << num2 << endl;
				cout << "----" << endl << " ";
				cin >> userAnswer;
				correctAnswer = num1 * num2;
				cout << "Correct Answer: " << correctAnswer << endl << endl;
				break;
			case 4: cout << "\n\nDivision\n";	//division problem
				cout << "  " << num1 << endl;
				cout << "/ " << num2 << endl;
				cout << "----" << endl << " ";
				cin >> userAnswer;
				correctAnswer = static_cast<double>(num1) / num2;
				cout << "Correct Answer: " << fixed << showpoint << setprecision(3);
				cout << correctAnswer << endl << endl;
			}
		}
	} while (choice != 5);	//exit loop when user enters 5

	return 0;
}
*/

/*
// 16. Savings Account Balance (& 26. Using Files-Savings Account Balance Modification)
int main()
{
	double annualIntRate,	//annual interest rate
		balance;		//starting balance of the account
	int numMonths;		//number of months that have passed

	//Get annual interest rate, balance, and number of months from user
	cout << "What is the annual interest rate on the account (as a decimal)? ";
	cin >> annualIntRate;
	while (annualIntRate <= 0)		//input validation, not letting user enter negative value for interest rate
	{
		cout << "\nPlease enter a value greater than 0.";
		cout << "\nWhat is the annual interest rate on the account (as a decimal)? ";
		cin >> annualIntRate;
	}
	cout << "\nWhat is was the starting balance of the account? $";
	cin >> balance;
	while (balance <= 0)	//input validation, not letting user enter negative value for the balance
	{
		cout << "\nPlease enter a value greater than 0.";
		cout << "\nWhat is the starting balance of the account? $";
		cin >> balance;
	}
	cout << "\nHow many months have passed since the creation of the account? ";
	cin >> numMonths;
	while (numMonths <= 0)		//input validation, not letting user enter negative value for num of months
	{
		cout << "\nPlease enter a value greater than 0.";
		cout << "\nHow many months have passed since the creation of the account? ";
		cin >> numMonths;
	}

	double deposit,		//deposits made by the user into the account
		withdrawl,		//withdrawls made by the user from the account
		monthlyIntRate = annualIntRate / 12,	//monthly interest rate
		interest,			//interest earned on the account
		totalDeposit = 0,		//accumulator of total deposits
		totalWithdrawl = 0,		//accumulator of total withdrawls
		totalInterest = 0;		//accumulator of total interest

	//loop to keep track of account balance
	for (int month = 1; month < numMonths + 1; month++)
	{
		cout << "\nHow much money was deposited into the account for month " << month << "? $";
		cin >> deposit;
		while (deposit < 0)	//input validation
		{
			cout << "\nPlease enter a value greater than 0.";
			cout << "\nHow much money was deposited into the account for month " << month << "? $";
			cin >> deposit;
		}
		balance += deposit;		//calculate the balance after deposit(s)
		totalDeposit += deposit;	//calculate total amount deposited

		cout << "\nHow much money was withdrawn from the account for month " << month << "? $";
		cin >> withdrawl;
		while (withdrawl < 0)		//input validation
		{
			cout << "\nPlease enter a value greater than 0.";
			cout << "\nHow much money was withdrawn from the account for month " << month << "? $";
			cin >> withdrawl;
		}
		balance -= withdrawl;		//calculate the balance after withdrawl(s)
		totalWithdrawl += withdrawl;	//calculate the total amount withdrawn

		interest = monthlyIntRate * balance;	//calculate interest
		balance += interest;		//add interest to existing balance
		totalInterest += interest;	//calculate total interest earned
	}//end of loop

	//Display final results; ending balance, total amt deposited, total amt withdrawn, total interest earned
	string asterisks;	//string to hold a number of asterisks for display purposes
	asterisks.assign(30, '*');
	cout << asterisks << endl;
	cout << "Ending Balance after " << numMonths << " months: $" << balance << endl;
	cout << "Total amount deposited over " << numMonths << " months: $" << totalDeposit << endl;
	cout << "Total amount withdrawn over " << numMonths << " months: $" << totalWithdrawl << endl;
	cout << "Total interest earned over " << numMonths << " months: $" << totalInterest << endl;
	cout << asterisks << endl;

	//Write data to a file
	ofstream outputFile;
	outputFile.open("Savings Account Balance.txt");		//opening the file

	//Writing data to file
	outputFile << "Ending Balance after " << numMonths << " months: $" << balance << endl;
	outputFile << "Total amount deposited over " << numMonths << " months: $" << totalDeposit << endl;
	outputFile << "Total amount withdrawn over " << numMonths << " months: $" << totalWithdrawl << endl;
	outputFile << "Total interest earned over " << numMonths << " months: $" << totalInterest << endl;

	outputFile.close();		//close the file

	system("pause");
	return 0;
}
*/
